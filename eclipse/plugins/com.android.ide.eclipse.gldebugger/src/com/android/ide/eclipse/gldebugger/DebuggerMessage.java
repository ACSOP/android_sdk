// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debugger_message.proto

package com.android.ide.eclipse.gldebugger;

public final class DebuggerMessage {
  private DebuggerMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public static final class Message extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Message.newBuilder() to construct.
    private Message() {
      initFields();
    }
    private Message(boolean noInit) {}

    private static final Message defaultInstance;
    public static Message getDefaultInstance() {
      return defaultInstance;
    }

    public Message getDefaultInstanceForType() {
      return defaultInstance;
    }

    public enum Function
        implements com.google.protobuf.Internal.EnumLite {
      glActiveTexture(0, 0),
      glAttachShader(1, 1),
      glBindAttribLocation(2, 2),
      glBindBuffer(3, 3),
      glBindFramebuffer(4, 4),
      glBindRenderbuffer(5, 5),
      glBindTexture(6, 6),
      glBlendColor(7, 7),
      glBlendEquation(8, 8),
      glBlendEquationSeparate(9, 9),
      glBlendFunc(10, 10),
      glBlendFuncSeparate(11, 11),
      glBufferData(12, 12),
      glBufferSubData(13, 13),
      glCheckFramebufferStatus(14, 14),
      glClear(15, 15),
      glClearColor(16, 16),
      glClearDepthf(17, 17),
      glClearStencil(18, 18),
      glColorMask(19, 19),
      glCompileShader(20, 20),
      glCompressedTexImage2D(21, 21),
      glCompressedTexSubImage2D(22, 22),
      glCopyTexImage2D(23, 23),
      glCopyTexSubImage2D(24, 24),
      glCreateProgram(25, 25),
      glCreateShader(26, 26),
      glCullFace(27, 27),
      glDeleteBuffers(28, 28),
      glDeleteFramebuffers(29, 29),
      glDeleteProgram(30, 30),
      glDeleteRenderbuffers(31, 31),
      glDeleteShader(32, 32),
      glDeleteTextures(33, 33),
      glDepthFunc(34, 34),
      glDepthMask(35, 35),
      glDepthRangef(36, 36),
      glDetachShader(37, 37),
      glDisable(38, 38),
      glDisableVertexAttribArray(39, 39),
      glDrawArrays(40, 40),
      glDrawElements(41, 41),
      glEnable(42, 42),
      glEnableVertexAttribArray(43, 43),
      glFinish(44, 44),
      glFlush(45, 45),
      glFramebufferRenderbuffer(46, 46),
      glFramebufferTexture2D(47, 47),
      glFrontFace(48, 48),
      glGenBuffers(49, 49),
      glGenerateMipmap(50, 50),
      glGenFramebuffers(51, 51),
      glGenRenderbuffers(52, 52),
      glGenTextures(53, 53),
      glGetActiveAttrib(54, 54),
      glGetActiveUniform(55, 55),
      glGetAttachedShaders(56, 56),
      glGetAttribLocation(57, 57),
      glGetBooleanv(58, 58),
      glGetBufferParameteriv(59, 59),
      glGetError(60, 60),
      glGetFloatv(61, 61),
      glGetFramebufferAttachmentParameteriv(62, 62),
      glGetIntegerv(63, 63),
      glGetProgramiv(64, 64),
      glGetProgramInfoLog(65, 65),
      glGetRenderbufferParameteriv(66, 66),
      glGetShaderiv(67, 67),
      glGetShaderInfoLog(68, 68),
      glGetShaderPrecisionFormat(69, 69),
      glGetShaderSource(70, 70),
      glGetString(71, 71),
      glGetTexParameterfv(72, 72),
      glGetTexParameteriv(73, 73),
      glGetUniformfv(74, 74),
      glGetUniformiv(75, 75),
      glGetUniformLocation(76, 76),
      glGetVertexAttribfv(77, 77),
      glGetVertexAttribiv(78, 78),
      glGetVertexAttribPointerv(79, 79),
      glHint(80, 80),
      glIsBuffer(81, 81),
      glIsEnabled(82, 82),
      glIsFramebuffer(83, 83),
      glIsProgram(84, 84),
      glIsRenderbuffer(85, 85),
      glIsShader(86, 86),
      glIsTexture(87, 87),
      glLineWidth(88, 88),
      glLinkProgram(89, 89),
      glPixelStorei(90, 90),
      glPolygonOffset(91, 91),
      glReadPixels(92, 92),
      glReleaseShaderCompiler(93, 93),
      glRenderbufferStorage(94, 94),
      glSampleCoverage(95, 95),
      glScissor(96, 96),
      glShaderBinary(97, 97),
      glShaderSource(98, 98),
      glStencilFunc(99, 99),
      glStencilFuncSeparate(100, 100),
      glStencilMask(101, 101),
      glStencilMaskSeparate(102, 102),
      glStencilOp(103, 103),
      glStencilOpSeparate(104, 104),
      glTexImage2D(105, 105),
      glTexParameterf(106, 106),
      glTexParameterfv(107, 107),
      glTexParameteri(108, 108),
      glTexParameteriv(109, 109),
      glTexSubImage2D(110, 110),
      glUniform1f(111, 111),
      glUniform1fv(112, 112),
      glUniform1i(113, 113),
      glUniform1iv(114, 114),
      glUniform2f(115, 115),
      glUniform2fv(116, 116),
      glUniform2i(117, 117),
      glUniform2iv(118, 118),
      glUniform3f(119, 119),
      glUniform3fv(120, 120),
      glUniform3i(121, 121),
      glUniform3iv(122, 122),
      glUniform4f(123, 123),
      glUniform4fv(124, 124),
      glUniform4i(125, 125),
      glUniform4iv(126, 126),
      glUniformMatrix2fv(127, 127),
      glUniformMatrix3fv(128, 128),
      glUniformMatrix4fv(129, 129),
      glUseProgram(130, 130),
      glValidateProgram(131, 131),
      glVertexAttrib1f(132, 132),
      glVertexAttrib1fv(133, 133),
      glVertexAttrib2f(134, 134),
      glVertexAttrib2fv(135, 135),
      glVertexAttrib3f(136, 136),
      glVertexAttrib3fv(137, 137),
      glVertexAttrib4f(138, 138),
      glVertexAttrib4fv(139, 139),
      glVertexAttribPointer(140, 140),
      glViewport(141, 141),
      eglGetDisplay(142, 142),
      eglInitialize(143, 143),
      eglTerminate(144, 144),
      eglGetConfigs(145, 145),
      eglChooseConfig(146, 146),
      eglGetConfigAttrib(147, 147),
      eglCreateWindowSurface(148, 148),
      eglCreatePixmapSurface(149, 149),
      eglCreatePbufferSurface(150, 150),
      eglDestroySurface(151, 151),
      eglQuerySurface(152, 152),
      eglCreateContext(153, 153),
      eglDestroyContext(154, 154),
      eglMakeCurrent(155, 155),
      eglGetCurrentContext(156, 156),
      eglGetCurrentSurface(157, 157),
      eglGetCurrentDisplay(158, 158),
      eglQueryContext(159, 159),
      eglWaitGL(160, 160),
      eglWaitNative(161, 161),
      eglSwapBuffers(162, 162),
      eglCopyBuffers(163, 163),
      eglGetError(164, 164),
      eglQueryString(165, 165),
      eglGetProcAddress(166, 166),
      eglSurfaceAttrib(167, 167),
      eglBindTexImage(168, 168),
      eglReleaseTexImage(169, 169),
      eglSwapInterval(170, 170),
      eglBindAPI(171, 171),
      eglQueryAPI(172, 172),
      eglWaitClient(173, 173),
      eglReleaseThread(174, 174),
      eglCreatePbufferFromClientBuffer(175, 175),
      eglLockSurfaceKHR(176, 176),
      eglUnlockSurfaceKHR(177, 177),
      eglCreateImageKHR(178, 178),
      eglDestroyImageKHR(179, 179),
      eglCreateSyncKHR(180, 180),
      eglDestroySyncKHR(181, 181),
      eglClientWaitSyncKHR(182, 182),
      eglGetSyncAttribKHR(183, 183),
      eglSetSwapRectangleANDROID(184, 184),
      eglGetRenderBufferANDROID(185, 185),
      ACK(186, 186),
      NEG(187, 187),
      CONTINUE(188, 188),
      SKIP(189, 189),
      SETPROP(190, 190),
      ;


      public final int getNumber() { return value; }

      public static Function valueOf(int value) {
        switch (value) {
          case 0: return glActiveTexture;
          case 1: return glAttachShader;
          case 2: return glBindAttribLocation;
          case 3: return glBindBuffer;
          case 4: return glBindFramebuffer;
          case 5: return glBindRenderbuffer;
          case 6: return glBindTexture;
          case 7: return glBlendColor;
          case 8: return glBlendEquation;
          case 9: return glBlendEquationSeparate;
          case 10: return glBlendFunc;
          case 11: return glBlendFuncSeparate;
          case 12: return glBufferData;
          case 13: return glBufferSubData;
          case 14: return glCheckFramebufferStatus;
          case 15: return glClear;
          case 16: return glClearColor;
          case 17: return glClearDepthf;
          case 18: return glClearStencil;
          case 19: return glColorMask;
          case 20: return glCompileShader;
          case 21: return glCompressedTexImage2D;
          case 22: return glCompressedTexSubImage2D;
          case 23: return glCopyTexImage2D;
          case 24: return glCopyTexSubImage2D;
          case 25: return glCreateProgram;
          case 26: return glCreateShader;
          case 27: return glCullFace;
          case 28: return glDeleteBuffers;
          case 29: return glDeleteFramebuffers;
          case 30: return glDeleteProgram;
          case 31: return glDeleteRenderbuffers;
          case 32: return glDeleteShader;
          case 33: return glDeleteTextures;
          case 34: return glDepthFunc;
          case 35: return glDepthMask;
          case 36: return glDepthRangef;
          case 37: return glDetachShader;
          case 38: return glDisable;
          case 39: return glDisableVertexAttribArray;
          case 40: return glDrawArrays;
          case 41: return glDrawElements;
          case 42: return glEnable;
          case 43: return glEnableVertexAttribArray;
          case 44: return glFinish;
          case 45: return glFlush;
          case 46: return glFramebufferRenderbuffer;
          case 47: return glFramebufferTexture2D;
          case 48: return glFrontFace;
          case 49: return glGenBuffers;
          case 50: return glGenerateMipmap;
          case 51: return glGenFramebuffers;
          case 52: return glGenRenderbuffers;
          case 53: return glGenTextures;
          case 54: return glGetActiveAttrib;
          case 55: return glGetActiveUniform;
          case 56: return glGetAttachedShaders;
          case 57: return glGetAttribLocation;
          case 58: return glGetBooleanv;
          case 59: return glGetBufferParameteriv;
          case 60: return glGetError;
          case 61: return glGetFloatv;
          case 62: return glGetFramebufferAttachmentParameteriv;
          case 63: return glGetIntegerv;
          case 64: return glGetProgramiv;
          case 65: return glGetProgramInfoLog;
          case 66: return glGetRenderbufferParameteriv;
          case 67: return glGetShaderiv;
          case 68: return glGetShaderInfoLog;
          case 69: return glGetShaderPrecisionFormat;
          case 70: return glGetShaderSource;
          case 71: return glGetString;
          case 72: return glGetTexParameterfv;
          case 73: return glGetTexParameteriv;
          case 74: return glGetUniformfv;
          case 75: return glGetUniformiv;
          case 76: return glGetUniformLocation;
          case 77: return glGetVertexAttribfv;
          case 78: return glGetVertexAttribiv;
          case 79: return glGetVertexAttribPointerv;
          case 80: return glHint;
          case 81: return glIsBuffer;
          case 82: return glIsEnabled;
          case 83: return glIsFramebuffer;
          case 84: return glIsProgram;
          case 85: return glIsRenderbuffer;
          case 86: return glIsShader;
          case 87: return glIsTexture;
          case 88: return glLineWidth;
          case 89: return glLinkProgram;
          case 90: return glPixelStorei;
          case 91: return glPolygonOffset;
          case 92: return glReadPixels;
          case 93: return glReleaseShaderCompiler;
          case 94: return glRenderbufferStorage;
          case 95: return glSampleCoverage;
          case 96: return glScissor;
          case 97: return glShaderBinary;
          case 98: return glShaderSource;
          case 99: return glStencilFunc;
          case 100: return glStencilFuncSeparate;
          case 101: return glStencilMask;
          case 102: return glStencilMaskSeparate;
          case 103: return glStencilOp;
          case 104: return glStencilOpSeparate;
          case 105: return glTexImage2D;
          case 106: return glTexParameterf;
          case 107: return glTexParameterfv;
          case 108: return glTexParameteri;
          case 109: return glTexParameteriv;
          case 110: return glTexSubImage2D;
          case 111: return glUniform1f;
          case 112: return glUniform1fv;
          case 113: return glUniform1i;
          case 114: return glUniform1iv;
          case 115: return glUniform2f;
          case 116: return glUniform2fv;
          case 117: return glUniform2i;
          case 118: return glUniform2iv;
          case 119: return glUniform3f;
          case 120: return glUniform3fv;
          case 121: return glUniform3i;
          case 122: return glUniform3iv;
          case 123: return glUniform4f;
          case 124: return glUniform4fv;
          case 125: return glUniform4i;
          case 126: return glUniform4iv;
          case 127: return glUniformMatrix2fv;
          case 128: return glUniformMatrix3fv;
          case 129: return glUniformMatrix4fv;
          case 130: return glUseProgram;
          case 131: return glValidateProgram;
          case 132: return glVertexAttrib1f;
          case 133: return glVertexAttrib1fv;
          case 134: return glVertexAttrib2f;
          case 135: return glVertexAttrib2fv;
          case 136: return glVertexAttrib3f;
          case 137: return glVertexAttrib3fv;
          case 138: return glVertexAttrib4f;
          case 139: return glVertexAttrib4fv;
          case 140: return glVertexAttribPointer;
          case 141: return glViewport;
          case 142: return eglGetDisplay;
          case 143: return eglInitialize;
          case 144: return eglTerminate;
          case 145: return eglGetConfigs;
          case 146: return eglChooseConfig;
          case 147: return eglGetConfigAttrib;
          case 148: return eglCreateWindowSurface;
          case 149: return eglCreatePixmapSurface;
          case 150: return eglCreatePbufferSurface;
          case 151: return eglDestroySurface;
          case 152: return eglQuerySurface;
          case 153: return eglCreateContext;
          case 154: return eglDestroyContext;
          case 155: return eglMakeCurrent;
          case 156: return eglGetCurrentContext;
          case 157: return eglGetCurrentSurface;
          case 158: return eglGetCurrentDisplay;
          case 159: return eglQueryContext;
          case 160: return eglWaitGL;
          case 161: return eglWaitNative;
          case 162: return eglSwapBuffers;
          case 163: return eglCopyBuffers;
          case 164: return eglGetError;
          case 165: return eglQueryString;
          case 166: return eglGetProcAddress;
          case 167: return eglSurfaceAttrib;
          case 168: return eglBindTexImage;
          case 169: return eglReleaseTexImage;
          case 170: return eglSwapInterval;
          case 171: return eglBindAPI;
          case 172: return eglQueryAPI;
          case 173: return eglWaitClient;
          case 174: return eglReleaseThread;
          case 175: return eglCreatePbufferFromClientBuffer;
          case 176: return eglLockSurfaceKHR;
          case 177: return eglUnlockSurfaceKHR;
          case 178: return eglCreateImageKHR;
          case 179: return eglDestroyImageKHR;
          case 180: return eglCreateSyncKHR;
          case 181: return eglDestroySyncKHR;
          case 182: return eglClientWaitSyncKHR;
          case 183: return eglGetSyncAttribKHR;
          case 184: return eglSetSwapRectangleANDROID;
          case 185: return eglGetRenderBufferANDROID;
          case 186: return ACK;
          case 187: return NEG;
          case 188: return CONTINUE;
          case 189: return SKIP;
          case 190: return SETPROP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Function>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Function>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Function>() {
              public Function findValueByNumber(int number) {
                return Function.valueOf(number)
      ;        }
            };

      private final int index;
      private final int value;
      private Function(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.android.glesv2debugger.Message.Function)
    }

    public enum Type
        implements com.google.protobuf.Internal.EnumLite {
      BeforeCall(0, 0),
      AfterCall(1, 1),
      AfterGeneratedCall(2, 2),
      Response(3, 3),
      CompleteCall(4, 4),
      ;


      public final int getNumber() { return value; }

      public static Type valueOf(int value) {
        switch (value) {
          case 0: return BeforeCall;
          case 1: return AfterCall;
          case 2: return AfterGeneratedCall;
          case 3: return Response;
          case 4: return CompleteCall;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.valueOf(number)
      ;        }
            };

      private final int index;
      private final int value;
      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.android.glesv2debugger.Message.Type)
    }

    public enum DataType
        implements com.google.protobuf.Internal.EnumLite {
      ReferencedImage(0, 0),
      NonreferencedImage(1, 1),
      ;


      public final int getNumber() { return value; }

      public static DataType valueOf(int value) {
        switch (value) {
          case 0: return ReferencedImage;
          case 1: return NonreferencedImage;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DataType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DataType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DataType>() {
              public DataType findValueByNumber(int number) {
                return DataType.valueOf(number)
      ;        }
            };

      private final int index;
      private final int value;
      private DataType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.android.glesv2debugger.Message.DataType)
    }

    public enum Prop
        implements com.google.protobuf.Internal.EnumLite {
      CaptureDraw(0, 0),
      TimeMode(1, 1),
      ExpectResponse(2, 2),
      CaptureSwap(3, 3),
      GLConstant(4, 4),
      ;


      public final int getNumber() { return value; }

      public static Prop valueOf(int value) {
        switch (value) {
          case 0: return CaptureDraw;
          case 1: return TimeMode;
          case 2: return ExpectResponse;
          case 3: return CaptureSwap;
          case 4: return GLConstant;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Prop>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Prop>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Prop>() {
              public Prop findValueByNumber(int number) {
                return Prop.valueOf(number)
      ;        }
            };

      private final int index;
      private final int value;
      private Prop(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.android.glesv2debugger.Message.Prop)
    }

    // required int32 context_id = 1;
    public static final int CONTEXT_ID_FIELD_NUMBER = 1;
    private boolean hasContextId;
    private int contextId_ = 0;
    public boolean hasContextId() { return hasContextId; }
    public int getContextId() { return contextId_; }

    // required .com.android.glesv2debugger.Message.Function function = 2 [default = NEG];
    public static final int FUNCTION_FIELD_NUMBER = 2;
    private boolean hasFunction;
    private com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function function_;
    public boolean hasFunction() { return hasFunction; }
    public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function getFunction() { return function_; }

    // required .com.android.glesv2debugger.Message.Type type = 3;
    public static final int TYPE_FIELD_NUMBER = 3;
    private boolean hasType;
    private com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type type_;
    public boolean hasType() { return hasType; }
    public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type getType() { return type_; }

    // required bool expect_response = 4;
    public static final int EXPECT_RESPONSE_FIELD_NUMBER = 4;
    private boolean hasExpectResponse;
    private boolean expectResponse_ = false;
    public boolean hasExpectResponse() { return hasExpectResponse; }
    public boolean getExpectResponse() { return expectResponse_; }

    // optional int32 ret = 5;
    public static final int RET_FIELD_NUMBER = 5;
    private boolean hasRet;
    private int ret_ = 0;
    public boolean hasRet() { return hasRet; }
    public int getRet() { return ret_; }

    // optional int32 arg0 = 6;
    public static final int ARG0_FIELD_NUMBER = 6;
    private boolean hasArg0;
    private int arg0_ = 0;
    public boolean hasArg0() { return hasArg0; }
    public int getArg0() { return arg0_; }

    // optional int32 arg1 = 7;
    public static final int ARG1_FIELD_NUMBER = 7;
    private boolean hasArg1;
    private int arg1_ = 0;
    public boolean hasArg1() { return hasArg1; }
    public int getArg1() { return arg1_; }

    // optional int32 arg2 = 8;
    public static final int ARG2_FIELD_NUMBER = 8;
    private boolean hasArg2;
    private int arg2_ = 0;
    public boolean hasArg2() { return hasArg2; }
    public int getArg2() { return arg2_; }

    // optional int32 arg3 = 9;
    public static final int ARG3_FIELD_NUMBER = 9;
    private boolean hasArg3;
    private int arg3_ = 0;
    public boolean hasArg3() { return hasArg3; }
    public int getArg3() { return arg3_; }

    // optional int32 arg4 = 16;
    public static final int ARG4_FIELD_NUMBER = 16;
    private boolean hasArg4;
    private int arg4_ = 0;
    public boolean hasArg4() { return hasArg4; }
    public int getArg4() { return arg4_; }

    // optional int32 arg5 = 17;
    public static final int ARG5_FIELD_NUMBER = 17;
    private boolean hasArg5;
    private int arg5_ = 0;
    public boolean hasArg5() { return hasArg5; }
    public int getArg5() { return arg5_; }

    // optional int32 arg6 = 18;
    public static final int ARG6_FIELD_NUMBER = 18;
    private boolean hasArg6;
    private int arg6_ = 0;
    public boolean hasArg6() { return hasArg6; }
    public int getArg6() { return arg6_; }

    // optional int32 arg7 = 19;
    public static final int ARG7_FIELD_NUMBER = 19;
    private boolean hasArg7;
    private int arg7_ = 0;
    public boolean hasArg7() { return hasArg7; }
    public int getArg7() { return arg7_; }

    // optional int32 arg8 = 20;
    public static final int ARG8_FIELD_NUMBER = 20;
    private boolean hasArg8;
    private int arg8_ = 0;
    public boolean hasArg8() { return hasArg8; }
    public int getArg8() { return arg8_; }

    // optional bytes data = 10;
    public static final int DATA_FIELD_NUMBER = 10;
    private boolean hasData;
    private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasData() { return hasData; }
    public com.google.protobuf.ByteString getData() { return data_; }

    // optional .com.android.glesv2debugger.Message.DataType data_type = 23;
    public static final int DATA_TYPE_FIELD_NUMBER = 23;
    private boolean hasDataType;
    private com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType dataType_;
    public boolean hasDataType() { return hasDataType; }
    public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType getDataType() { return dataType_; }

    // optional int32 pixel_format = 24;
    public static final int PIXEL_FORMAT_FIELD_NUMBER = 24;
    private boolean hasPixelFormat;
    private int pixelFormat_ = 0;
    public boolean hasPixelFormat() { return hasPixelFormat; }
    public int getPixelFormat() { return pixelFormat_; }

    // optional int32 pixel_type = 25;
    public static final int PIXEL_TYPE_FIELD_NUMBER = 25;
    private boolean hasPixelType;
    private int pixelType_ = 0;
    public boolean hasPixelType() { return hasPixelType; }
    public int getPixelType() { return pixelType_; }

    // optional int32 image_width = 26;
    public static final int IMAGE_WIDTH_FIELD_NUMBER = 26;
    private boolean hasImageWidth;
    private int imageWidth_ = 0;
    public boolean hasImageWidth() { return hasImageWidth; }
    public int getImageWidth() { return imageWidth_; }

    // optional int32 image_height = 27;
    public static final int IMAGE_HEIGHT_FIELD_NUMBER = 27;
    private boolean hasImageHeight;
    private int imageHeight_ = 0;
    public boolean hasImageHeight() { return hasImageHeight; }
    public int getImageHeight() { return imageHeight_; }

    // optional float time = 11;
    public static final int TIME_FIELD_NUMBER = 11;
    private boolean hasTime;
    private float time_ = 0F;
    public boolean hasTime() { return hasTime; }
    public float getTime() { return time_; }

    // optional .com.android.glesv2debugger.Message.Prop prop = 21;
    public static final int PROP_FIELD_NUMBER = 21;
    private boolean hasProp;
    private com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop prop_;
    public boolean hasProp() { return hasProp; }
    public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop getProp() { return prop_; }

    // optional float clock = 22;
    public static final int CLOCK_FIELD_NUMBER = 22;
    private boolean hasClock;
    private float clock_ = 0F;
    public boolean hasClock() { return hasClock; }
    public float getClock() { return clock_; }

    private void initFields() {
      function_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function.NEG;
      type_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type.BeforeCall;
      dataType_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType.ReferencedImage;
      prop_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop.CaptureDraw;
    }
    public final boolean isInitialized() {
      if (!hasContextId) return false;
      if (!hasFunction) return false;
      if (!hasType) return false;
      if (!hasExpectResponse) return false;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasContextId()) {
        output.writeInt32(1, getContextId());
      }
      if (hasFunction()) {
        output.writeEnum(2, getFunction().getNumber());
      }
      if (hasType()) {
        output.writeEnum(3, getType().getNumber());
      }
      if (hasExpectResponse()) {
        output.writeBool(4, getExpectResponse());
      }
      if (hasRet()) {
        output.writeInt32(5, getRet());
      }
      if (hasArg0()) {
        output.writeInt32(6, getArg0());
      }
      if (hasArg1()) {
        output.writeInt32(7, getArg1());
      }
      if (hasArg2()) {
        output.writeInt32(8, getArg2());
      }
      if (hasArg3()) {
        output.writeInt32(9, getArg3());
      }
      if (hasData()) {
        output.writeBytes(10, getData());
      }
      if (hasTime()) {
        output.writeFloat(11, getTime());
      }
      if (hasArg4()) {
        output.writeInt32(16, getArg4());
      }
      if (hasArg5()) {
        output.writeInt32(17, getArg5());
      }
      if (hasArg6()) {
        output.writeInt32(18, getArg6());
      }
      if (hasArg7()) {
        output.writeInt32(19, getArg7());
      }
      if (hasArg8()) {
        output.writeInt32(20, getArg8());
      }
      if (hasProp()) {
        output.writeEnum(21, getProp().getNumber());
      }
      if (hasClock()) {
        output.writeFloat(22, getClock());
      }
      if (hasDataType()) {
        output.writeEnum(23, getDataType().getNumber());
      }
      if (hasPixelFormat()) {
        output.writeInt32(24, getPixelFormat());
      }
      if (hasPixelType()) {
        output.writeInt32(25, getPixelType());
      }
      if (hasImageWidth()) {
        output.writeInt32(26, getImageWidth());
      }
      if (hasImageHeight()) {
        output.writeInt32(27, getImageHeight());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasContextId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getContextId());
      }
      if (hasFunction()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, getFunction().getNumber());
      }
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, getType().getNumber());
      }
      if (hasExpectResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, getExpectResponse());
      }
      if (hasRet()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getRet());
      }
      if (hasArg0()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getArg0());
      }
      if (hasArg1()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getArg1());
      }
      if (hasArg2()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getArg2());
      }
      if (hasArg3()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getArg3());
      }
      if (hasData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getData());
      }
      if (hasTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, getTime());
      }
      if (hasArg4()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, getArg4());
      }
      if (hasArg5()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, getArg5());
      }
      if (hasArg6()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, getArg6());
      }
      if (hasArg7()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, getArg7());
      }
      if (hasArg8()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, getArg8());
      }
      if (hasProp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(21, getProp().getNumber());
      }
      if (hasClock()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, getClock());
      }
      if (hasDataType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(23, getDataType().getNumber());
      }
      if (hasPixelFormat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, getPixelFormat());
      }
      if (hasPixelType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, getPixelType());
      }
      if (hasImageWidth()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, getImageWidth());
      }
      if (hasImageHeight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, getImageHeight());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.android.ide.eclipse.gldebugger.DebuggerMessage.Message parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.android.ide.eclipse.gldebugger.DebuggerMessage.Message prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.ide.eclipse.gldebugger.DebuggerMessage.Message, Builder> {
      private com.android.ide.eclipse.gldebugger.DebuggerMessage.Message result;

      // Construct using com.android.glesv2debugger.DebuggerMessage.Message.newBuilder()
      private Builder() {}

      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.android.ide.eclipse.gldebugger.DebuggerMessage.Message();
        return builder;
      }

      @Override
    protected com.android.ide.eclipse.gldebugger.DebuggerMessage.Message internalGetResult() {
        return result;
      }

      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.android.ide.eclipse.gldebugger.DebuggerMessage.Message();
        return this;
      }

      @Override
    public Builder clone() {
        return create().mergeFrom(result);
      }

      @Override
    public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message getDefaultInstanceForType() {
        return com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.getDefaultInstance();
      }

      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }

      private com.android.ide.eclipse.gldebugger.DebuggerMessage.Message buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }

      public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.android.ide.eclipse.gldebugger.DebuggerMessage.Message returnMe = result;
        result = null;
        return returnMe;
      }

      @Override
    public Builder mergeFrom(com.android.ide.eclipse.gldebugger.DebuggerMessage.Message other) {
        if (other == com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.getDefaultInstance()) return this;
        if (other.hasContextId()) {
          setContextId(other.getContextId());
        }
        if (other.hasFunction()) {
          setFunction(other.getFunction());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasExpectResponse()) {
          setExpectResponse(other.getExpectResponse());
        }
        if (other.hasRet()) {
          setRet(other.getRet());
        }
        if (other.hasArg0()) {
          setArg0(other.getArg0());
        }
        if (other.hasArg1()) {
          setArg1(other.getArg1());
        }
        if (other.hasArg2()) {
          setArg2(other.getArg2());
        }
        if (other.hasArg3()) {
          setArg3(other.getArg3());
        }
        if (other.hasArg4()) {
          setArg4(other.getArg4());
        }
        if (other.hasArg5()) {
          setArg5(other.getArg5());
        }
        if (other.hasArg6()) {
          setArg6(other.getArg6());
        }
        if (other.hasArg7()) {
          setArg7(other.getArg7());
        }
        if (other.hasArg8()) {
          setArg8(other.getArg8());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasDataType()) {
          setDataType(other.getDataType());
        }
        if (other.hasPixelFormat()) {
          setPixelFormat(other.getPixelFormat());
        }
        if (other.hasPixelType()) {
          setPixelType(other.getPixelType());
        }
        if (other.hasImageWidth()) {
          setImageWidth(other.getImageWidth());
        }
        if (other.hasImageHeight()) {
          setImageHeight(other.getImageHeight());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasProp()) {
          setProp(other.getProp());
        }
        if (other.hasClock()) {
          setClock(other.getClock());
        }
        return this;
      }

      @Override
    public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setContextId(input.readInt32());
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function value = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function.valueOf(rawValue);
              if (value != null) {
                setFunction(value);
              }
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type value = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 32: {
              setExpectResponse(input.readBool());
              break;
            }
            case 40: {
              setRet(input.readInt32());
              break;
            }
            case 48: {
              setArg0(input.readInt32());
              break;
            }
            case 56: {
              setArg1(input.readInt32());
              break;
            }
            case 64: {
              setArg2(input.readInt32());
              break;
            }
            case 72: {
              setArg3(input.readInt32());
              break;
            }
            case 82: {
              setData(input.readBytes());
              break;
            }
            case 93: {
              setTime(input.readFloat());
              break;
            }
            case 128: {
              setArg4(input.readInt32());
              break;
            }
            case 136: {
              setArg5(input.readInt32());
              break;
            }
            case 144: {
              setArg6(input.readInt32());
              break;
            }
            case 152: {
              setArg7(input.readInt32());
              break;
            }
            case 160: {
              setArg8(input.readInt32());
              break;
            }
            case 168: {
              int rawValue = input.readEnum();
              com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop value = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop.valueOf(rawValue);
              if (value != null) {
                setProp(value);
              }
              break;
            }
            case 181: {
              setClock(input.readFloat());
              break;
            }
            case 184: {
              int rawValue = input.readEnum();
              com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType value = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType.valueOf(rawValue);
              if (value != null) {
                setDataType(value);
              }
              break;
            }
            case 192: {
              setPixelFormat(input.readInt32());
              break;
            }
            case 200: {
              setPixelType(input.readInt32());
              break;
            }
            case 208: {
              setImageWidth(input.readInt32());
              break;
            }
            case 216: {
              setImageHeight(input.readInt32());
              break;
            }
          }
        }
      }


      // required int32 context_id = 1;
      public boolean hasContextId() {
        return result.hasContextId();
      }
      public int getContextId() {
        return result.getContextId();
      }
      public Builder setContextId(int value) {
        result.hasContextId = true;
        result.contextId_ = value;
        return this;
      }
      public Builder clearContextId() {
        result.hasContextId = false;
        result.contextId_ = 0;
        return this;
      }

      // required .com.android.glesv2debugger.Message.Function function = 2 [default = NEG];
      public boolean hasFunction() {
        return result.hasFunction();
      }
      public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function getFunction() {
        return result.getFunction();
      }
      public Builder setFunction(com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFunction = true;
        result.function_ = value;
        return this;
      }
      public Builder clearFunction() {
        result.hasFunction = false;
        result.function_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Function.NEG;
        return this;
      }

      // required .com.android.glesv2debugger.Message.Type type = 3;
      public boolean hasType() {
        return result.hasType();
      }
      public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type getType() {
        return result.getType();
      }
      public Builder setType(com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Type.BeforeCall;
        return this;
      }

      // required bool expect_response = 4;
      public boolean hasExpectResponse() {
        return result.hasExpectResponse();
      }
      public boolean getExpectResponse() {
        return result.getExpectResponse();
      }
      public Builder setExpectResponse(boolean value) {
        result.hasExpectResponse = true;
        result.expectResponse_ = value;
        return this;
      }
      public Builder clearExpectResponse() {
        result.hasExpectResponse = false;
        result.expectResponse_ = false;
        return this;
      }

      // optional int32 ret = 5;
      public boolean hasRet() {
        return result.hasRet();
      }
      public int getRet() {
        return result.getRet();
      }
      public Builder setRet(int value) {
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder clearRet() {
        result.hasRet = false;
        result.ret_ = 0;
        return this;
      }

      // optional int32 arg0 = 6;
      public boolean hasArg0() {
        return result.hasArg0();
      }
      public int getArg0() {
        return result.getArg0();
      }
      public Builder setArg0(int value) {
        result.hasArg0 = true;
        result.arg0_ = value;
        return this;
      }
      public Builder clearArg0() {
        result.hasArg0 = false;
        result.arg0_ = 0;
        return this;
      }

      // optional int32 arg1 = 7;
      public boolean hasArg1() {
        return result.hasArg1();
      }
      public int getArg1() {
        return result.getArg1();
      }
      public Builder setArg1(int value) {
        result.hasArg1 = true;
        result.arg1_ = value;
        return this;
      }
      public Builder clearArg1() {
        result.hasArg1 = false;
        result.arg1_ = 0;
        return this;
      }

      // optional int32 arg2 = 8;
      public boolean hasArg2() {
        return result.hasArg2();
      }
      public int getArg2() {
        return result.getArg2();
      }
      public Builder setArg2(int value) {
        result.hasArg2 = true;
        result.arg2_ = value;
        return this;
      }
      public Builder clearArg2() {
        result.hasArg2 = false;
        result.arg2_ = 0;
        return this;
      }

      // optional int32 arg3 = 9;
      public boolean hasArg3() {
        return result.hasArg3();
      }
      public int getArg3() {
        return result.getArg3();
      }
      public Builder setArg3(int value) {
        result.hasArg3 = true;
        result.arg3_ = value;
        return this;
      }
      public Builder clearArg3() {
        result.hasArg3 = false;
        result.arg3_ = 0;
        return this;
      }

      // optional int32 arg4 = 16;
      public boolean hasArg4() {
        return result.hasArg4();
      }
      public int getArg4() {
        return result.getArg4();
      }
      public Builder setArg4(int value) {
        result.hasArg4 = true;
        result.arg4_ = value;
        return this;
      }
      public Builder clearArg4() {
        result.hasArg4 = false;
        result.arg4_ = 0;
        return this;
      }

      // optional int32 arg5 = 17;
      public boolean hasArg5() {
        return result.hasArg5();
      }
      public int getArg5() {
        return result.getArg5();
      }
      public Builder setArg5(int value) {
        result.hasArg5 = true;
        result.arg5_ = value;
        return this;
      }
      public Builder clearArg5() {
        result.hasArg5 = false;
        result.arg5_ = 0;
        return this;
      }

      // optional int32 arg6 = 18;
      public boolean hasArg6() {
        return result.hasArg6();
      }
      public int getArg6() {
        return result.getArg6();
      }
      public Builder setArg6(int value) {
        result.hasArg6 = true;
        result.arg6_ = value;
        return this;
      }
      public Builder clearArg6() {
        result.hasArg6 = false;
        result.arg6_ = 0;
        return this;
      }

      // optional int32 arg7 = 19;
      public boolean hasArg7() {
        return result.hasArg7();
      }
      public int getArg7() {
        return result.getArg7();
      }
      public Builder setArg7(int value) {
        result.hasArg7 = true;
        result.arg7_ = value;
        return this;
      }
      public Builder clearArg7() {
        result.hasArg7 = false;
        result.arg7_ = 0;
        return this;
      }

      // optional int32 arg8 = 20;
      public boolean hasArg8() {
        return result.hasArg8();
      }
      public int getArg8() {
        return result.getArg8();
      }
      public Builder setArg8(int value) {
        result.hasArg8 = true;
        result.arg8_ = value;
        return this;
      }
      public Builder clearArg8() {
        result.hasArg8 = false;
        result.arg8_ = 0;
        return this;
      }

      // optional bytes data = 10;
      public boolean hasData() {
        return result.hasData();
      }
      public com.google.protobuf.ByteString getData() {
        return result.getData();
      }
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder clearData() {
        result.hasData = false;
        result.data_ = getDefaultInstance().getData();
        return this;
      }

      // optional .com.android.glesv2debugger.Message.DataType data_type = 23;
      public boolean hasDataType() {
        return result.hasDataType();
      }
      public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType getDataType() {
        return result.getDataType();
      }
      public Builder setDataType(com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasDataType = true;
        result.dataType_ = value;
        return this;
      }
      public Builder clearDataType() {
        result.hasDataType = false;
        result.dataType_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.DataType.ReferencedImage;
        return this;
      }

      // optional int32 pixel_format = 24;
      public boolean hasPixelFormat() {
        return result.hasPixelFormat();
      }
      public int getPixelFormat() {
        return result.getPixelFormat();
      }
      public Builder setPixelFormat(int value) {
        result.hasPixelFormat = true;
        result.pixelFormat_ = value;
        return this;
      }
      public Builder clearPixelFormat() {
        result.hasPixelFormat = false;
        result.pixelFormat_ = 0;
        return this;
      }

      // optional int32 pixel_type = 25;
      public boolean hasPixelType() {
        return result.hasPixelType();
      }
      public int getPixelType() {
        return result.getPixelType();
      }
      public Builder setPixelType(int value) {
        result.hasPixelType = true;
        result.pixelType_ = value;
        return this;
      }
      public Builder clearPixelType() {
        result.hasPixelType = false;
        result.pixelType_ = 0;
        return this;
      }

      // optional int32 image_width = 26;
      public boolean hasImageWidth() {
        return result.hasImageWidth();
      }
      public int getImageWidth() {
        return result.getImageWidth();
      }
      public Builder setImageWidth(int value) {
        result.hasImageWidth = true;
        result.imageWidth_ = value;
        return this;
      }
      public Builder clearImageWidth() {
        result.hasImageWidth = false;
        result.imageWidth_ = 0;
        return this;
      }

      // optional int32 image_height = 27;
      public boolean hasImageHeight() {
        return result.hasImageHeight();
      }
      public int getImageHeight() {
        return result.getImageHeight();
      }
      public Builder setImageHeight(int value) {
        result.hasImageHeight = true;
        result.imageHeight_ = value;
        return this;
      }
      public Builder clearImageHeight() {
        result.hasImageHeight = false;
        result.imageHeight_ = 0;
        return this;
      }

      // optional float time = 11;
      public boolean hasTime() {
        return result.hasTime();
      }
      public float getTime() {
        return result.getTime();
      }
      public Builder setTime(float value) {
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder clearTime() {
        result.hasTime = false;
        result.time_ = 0F;
        return this;
      }

      // optional .com.android.glesv2debugger.Message.Prop prop = 21;
      public boolean hasProp() {
        return result.hasProp();
      }
      public com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop getProp() {
        return result.getProp();
      }
      public Builder setProp(com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasProp = true;
        result.prop_ = value;
        return this;
      }
      public Builder clearProp() {
        result.hasProp = false;
        result.prop_ = com.android.ide.eclipse.gldebugger.DebuggerMessage.Message.Prop.CaptureDraw;
        return this;
      }

      // optional float clock = 22;
      public boolean hasClock() {
        return result.hasClock();
      }
      public float getClock() {
        return result.getClock();
      }
      public Builder setClock(float value) {
        result.hasClock = true;
        result.clock_ = value;
        return this;
      }
      public Builder clearClock() {
        result.hasClock = false;
        result.clock_ = 0F;
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.glesv2debugger.Message)
    }

    static {
      defaultInstance = new Message(true);
      com.android.ide.eclipse.gldebugger.DebuggerMessage.internalForceInit();
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.android.glesv2debugger.Message)
  }


  static {
  }

  public static void internalForceInit() {}

  // @@protoc_insertion_point(outer_class_scope)
}
